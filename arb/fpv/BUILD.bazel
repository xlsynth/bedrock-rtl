# Copyright 2024-2025 The Bedrock-RTL Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_hdl//verilog:providers.bzl", "verilog_library")
load("//bazel:br_verilog.bzl", "br_verilog_fpv_test_tools_suite")
load("//bazel:verilog.bzl", "verilog_elab_test")

package(default_visibility = ["//visibility:public"])

# Basic arb checker
verilog_library(
    name = "arb_basic_fpv_monitor",
    srcs = ["arb_basic_fpv_monitor.sv"],
    deps = [
        "//macros:br_registers",
    ],
)

# Basic LRU checker
verilog_library(
    name = "lru_basic_fpv_monitor",
    srcs = ["lru_basic_fpv_monitor.sv"],
)

# Basic Round Robin checker
verilog_library(
    name = "rr_basic_fpv_monitor",
    srcs = ["rr_basic_fpv_monitor.sv"],
)

# Fixed priority arbiter

verilog_library(
    name = "br_arb_fixed_fpv_monitor",
    srcs = ["br_arb_fixed_fpv_monitor.sv"],
    deps = [
        ":arb_basic_fpv_monitor",
        "//arb/rtl:br_arb_fixed",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_fixed_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_fixed_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_fixed_fpv_test_tools_suite",
    params = {
        "NumRequesters": [
            "2",
            "5",
            "6",
        ],
    },
    tools = {
        "jg": "br_arb_fixed_fpv.jg.tcl",
        "vcf": "br_arb_fixed_fpv.vcf.tcl",
    },
    top = "br_arb_fixed",
    deps = [":br_arb_fixed_fpv_monitor"],
)

# Round robin arbiter
verilog_library(
    name = "br_arb_rr_fpv_monitor",
    srcs = ["br_arb_rr_fpv_monitor.sv"],
    deps = [
        ":arb_basic_fpv_monitor",
        ":rr_basic_fpv_monitor",
        "//arb/rtl:br_arb_rr",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_rr_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_rr_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_rr_test_suite",
    params = {
        "NumRequesters": [
            "2",
            "5",
            "6",
        ],
    },
    tools = {
        "jg": "br_arb_rr_fpv.jg.tcl",
        "vcf": "br_arb_rr_fpv.vcf.tcl",
    },
    top = "br_arb_rr",
    deps = [":br_arb_rr_fpv_monitor"],
)

# LRU arbiter

verilog_library(
    name = "br_arb_lru_fpv_monitor",
    srcs = ["br_arb_lru_fpv_monitor.sv"],
    deps = [
        ":arb_basic_fpv_monitor",
        ":lru_basic_fpv_monitor",
        "//arb/rtl:br_arb_lru",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_lru_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_lru_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_lru_test_suite",
    params = {
        "NumRequesters": [
            "2",
            "5",
            "6",
        ],
    },
    tools = {
        "jg": "br_arb_lru_fpv.jg.tcl",
        "vcf": "br_arb_lru_fpv.vcf.tcl",
    },
    top = "br_arb_lru",
    deps = [":br_arb_lru_fpv_monitor"],
)

# Prioritized round-robin arbiter
verilog_library(
    name = "br_arb_pri_rr_fpv_monitor",
    srcs = ["br_arb_pri_rr_fpv_monitor.sv"],
    deps = [
        ":br_arb_rr_fpv_monitor",
        "//arb/rtl:br_arb_pri_rr",
        "//arb/rtl:br_arb_rr",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_pri_rr_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_pri_rr_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_pri_rr_test_suite",
    params = {
        "NumPriorities": [
            "2",
            "3",
            "4",
        ],
        "NumRequesters": [
            "2",
            "5",
            "8",
        ],
    },
    tools = {
        "jg": "br_arb_pri_rr_fpv.jg.tcl",
        "vcf": "br_arb_pri_rr_fpv.vcf.tcl",
    },
    top = "br_arb_pri_rr",
    deps = [":br_arb_pri_rr_fpv_monitor"],
)

# Weighted Round-Robin Arbiter

verilog_library(
    name = "br_arb_weighted_rr_fpv_monitor",
    srcs = ["br_arb_weighted_rr_fpv_monitor.sv"],
    deps = [
        "//arb/rtl:br_arb_weighted_rr",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_weighted_rr_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_weighted_rr_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_weighted_rr_test_suite",
    # MaxAccumulatedWeight >= MaxWeight
    illegal_param_combinations = {
        (
            "MaxAccumulatedWeight",
            "MaxWeight",
        ): [
            ("1", "3"),
            ("1", "5"),
        ],
    },
    params = {
        "MaxAccumulatedWeight": [
            "1",
            "5",
            "7",
        ],
        "MaxWeight": [
            "1",
            "3",
            "5",
        ],
        "NumRequesters": [
            "2",
            "3",
            "4",
        ],
    },
    tools = {
        "jg": "br_arb_weighted_rr_fpv.jg.tcl",
        "vcf": "br_arb_weighted_rr_fpv.vcf.tcl",
    },
    top = "br_arb_weighted_rr",
    deps = [":br_arb_weighted_rr_fpv_monitor"],
)

# Bedrock-RTL Round-Robin Arbiter with multiple grants per cycle

verilog_library(
    name = "br_arb_multi_rr_fpv_monitor",
    srcs = ["br_arb_multi_rr_fpv_monitor.sv"],
    deps = [
        "//arb/rtl:br_arb_multi_rr",
        "//macros:br_fv",
    ],
)

verilog_elab_test(
    name = "br_arb_multi_rr_fpv_monitor_elab_test",
    tool = "verific",
    deps = [":br_arb_multi_rr_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_arb_multi_rr_test_suite",
    # MaxGrantPerCycle must be at least 2 and at most NumRequesters.
    illegal_param_combinations = {
        (
            "MaxGrantPerCycle",
            "NumRequesters",
        ): [
            ("3", "2"),
            ("5", "2"),
        ],
    },
    params = {
        "MaxGrantPerCycle": [
            "2",
            "3",
            "5",
        ],
        "NumRequesters": [
            "2",
            "5",
            "6",
        ],
    },
    tools = {
        "jg": "br_arb_multi_rr_fpv.jg.tcl",
        "vcf": "br_arb_multi_rr_fpv.vcf.tcl",
    },
    top = "br_arb_multi_rr",
    deps = [":br_arb_multi_rr_fpv_monitor"],
)
