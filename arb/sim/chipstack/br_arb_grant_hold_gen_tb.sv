
/*
*********************************************
**    File auto-generated by Chipstack.    **
*********************************************
*/

//=============================================================
// Testbench for Module: br_arb_grant_hold
//=============================================================
// Author: ChipStack AI
// Date: 2025-05-08 16:38:54
// Description: Unit test for br_arb_grant_hold
//=============================================================



module br_arb_grant_hold_gen_tb;
  timeunit 1ns; timeprecision 100ps;

  //===========================================================
  // Testbench Parameters
  //===========================================================
  parameter int CLOCK_FREQ = 100;  // Clock frequency in MHz
  parameter int RESET_DURATION = 100;  // Reset duration in ns
  parameter int TIMEOUT = 10000000;  // Timeout value in ns
  parameter int PER_TASK_TIMEOUT = 1000000;  // Timeout value for each task in ns
  parameter int ENABLE_INFO_MESSAGES = 1;  // Enable info messages (to control verbosity)
  parameter int CLOCK_FREQ_NS_CONVERSION_FACTOR = 1000;  // Conversion factor to nanoseconds
  parameter int NO_ASSERTS_ON_RESET = 1;  // Disable assertions during reset

  //===========================================================
  // DUT Imports and Includes
  //===========================================================

  `include "br_asserts_internal.svh"
  `include "br_registers.svh"

  //===========================================================
  // DUT Parameters
  //===========================================================
  parameter int NumRequesters = 2;

  //===========================================================
  // Clock and Reset Signals
  //===========================================================
  logic clk;
  logic rst;

  //===========================================================
  // Other Signals and Variables
  //===========================================================
  logic [NumRequesters-1:0] grant_hold;
  logic enable_priority_update;
  logic [NumRequesters-1:0] grant_from_arb;
  logic enable_priority_update_to_arb;
  logic [NumRequesters-1:0] grant;

  //===========================================================
  // DUT Instantiation
  //===========================================================
  // Clock to DUT is inverted to avoid race condition between DUT and TB
  br_arb_grant_hold #(
      .NumRequesters(NumRequesters)
  ) dut (
      .clk(~clk),
      .rst(rst),
      .grant_hold(grant_hold),
      .enable_priority_update(enable_priority_update),
      .grant_from_arb(grant_from_arb),
      .enable_priority_update_to_arb(enable_priority_update_to_arb),
      .grant(grant)
  );


  //===========================================================
  // Clock Generation
  //===========================================================
  initial begin
    clk = 1'b0;
    forever #(CLOCK_FREQ_NS_CONVERSION_FACTOR / (2 * CLOCK_FREQ)) clk = ~clk;
  end


  //===========================================================
  // Reset Generation
  //===========================================================
  task automatic reset_dut;
    if (NO_ASSERTS_ON_RESET) $assertoff;

    // Set all the DUT inputs to their reset values, ensuring no X/Z at the inputs.
    for (int i = 0; i < NumRequesters; i++) begin
      grant_hold[i] = 1'b0;  // Reset value for grant_hold
      grant_from_arb[i] = 1'b0;  // Reset value for grant_from_arb
    end
    enable_priority_update = 1'b0;  // Reset value for enable_priority_update

    // Wiggling the reset signal.
    rst = 1'bx;  // Setting to undefined before asserting
    #RESET_DURATION;
    rst = 1'b1;  // Assuming active high reset
    #RESET_DURATION;
    rst = 1'b0;  // Inactive value for reset
    #RESET_DURATION;

    if (NO_ASSERTS_ON_RESET) $asserton;
  endtask



  //===========================================================
  // Helper testbench variables
  //===========================================================
  string passed_tests[$];
  string failed_tests[$];

`ifdef WAVES_AS_FSDB
  bit enable_fsdb;
`endif
  //===========================================================
  // Timeout Control
  //===========================================================
  initial begin
    if (NO_ASSERTS_ON_RESET) $assertoff;
    #(TIMEOUT);
    $display("Error: Testbench timeout!");
    $finish;
  end

`ifdef WAVES_AS_FSDB
  initial begin
    // Enable FSDB dump for TB and DUT
    if ($value$plusargs("ENABLE_FSDB_DUMP=%0d", enable_fsdb)) begin
      $fsdbDumpfile("tb.fsdb");
      $fsdbDumpvars(0, br_arb_grant_hold_gen_tb, "+all");
    end
  end
`endif


  //===========================================================
  // Initial Block to Call Tasks
  //===========================================================


  // VCD Dump Start
  task automatic startVCDDump();
    begin
      $dumpfile("tb.vcd");  // Create VCD dump file for task
      $dumpvars(2, br_arb_grant_hold_gen_tb);  // Dump TB and DUT
      $display("%t: VCD dump started", $time);
    end
  endtask



  // VCD Dump End
  task automatic endVCDDump;
    begin
      $dumpoff;
      $display("VCD dump stopped.");
    end
  endtask



  initial begin
    startVCDDump();

    reset_dut();
    test_BasicGrantHoldActivation();

    reset_dut();
    test_PriorityUpdateControl();

    reset_dut();
    test_GrantSignalPropagation();

    reset_dut();
    test_EnablePriorityUpdateToArbiter();

    reset_dut();
    test_ResetBehaviorVerification();

    reset_dut();
    test_PostResetSignalStability();

    endVCDDump();
    foreach (passed_tests[i]) $display("%s: PASSED", passed_tests[i]);

    foreach (failed_tests[i]) $display("%s: FAILED", failed_tests[i]);

    if (failed_tests.size() > 0 || passed_tests.size() == 0) begin
      $display("TEST FAILED");
      $finish(1);
    end else begin
      $display("TEST PASSED");
      $finish(0);
    end
  end

  task automatic test_BasicGrantHoldActivation;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_BasicGrantHoldActivation", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_BasicGrantHoldActivation. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_BasicGrantHoldActivation");
      end
      begin
        // This task tests the basic functionality of the grant hold activation, ensuring that when a requester is granted, the grant is held as long as the `grant_hold` signal is asserted for that requester.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] initial_grant_from_arb;
        logic [NumRequesters-1:0] new_grant_from_arb;

        // Initial stimulus setup
        @(posedge clk);
        initial_grant_from_arb = 'h1;  // Assuming requester 0 is granted initially
        grant_from_arb = initial_grant_from_arb;
        grant_hold = 'h0;
        enable_priority_update = 1'b1;

        // Drive initial grant_from_arb
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_BasicGrantHoldActivation - Driving initial grant_from_arb=0x%h",
              $time,
              initial_grant_from_arb
          );

        // Assert grant_hold for the granted requester
        @(posedge clk);
        grant_hold[0] = 1'b1;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_BasicGrantHoldActivation - Asserting grant_hold for requester 0",
              $time
          );

        // Change grant_from_arb to a new value
        @(posedge clk);
        new_grant_from_arb = 'h2;  // Assuming requester 1 is granted in the new value
        grant_from_arb = new_grant_from_arb;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_BasicGrantHoldActivation - Changing grant_from_arb to 0x%h",
              $time,
              new_grant_from_arb
          );

        // Monitor grant output to ensure grant is held
        @(posedge clk);
        if (grant[0] != 1'b1) begin
          $display(
              "Time: %0t, ERROR: test_BasicGrantHoldActivation - Grant not held for requester 0. Expected 1, got %b",
              $time, grant[0]);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_BasicGrantHoldActivation - Grant held for requester 0 as expected",
                $time
            );
        end

        // Deassert grant_hold and check grant release
        @(posedge clk);
        grant_hold[0] = 1'b0;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_BasicGrantHoldActivation - Deasserting grant_hold for requester 0",
              $time
          );

        @(posedge clk);
        if (grant != new_grant_from_arb) begin
          $display(
              "Time: %0t, ERROR: test_BasicGrantHoldActivation - Grant not released correctly. Expected 0x%h, got 0x%h",
              $time, new_grant_from_arb, grant);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_BasicGrantHoldActivation - Grant released correctly to new value 0x%h",
                $time,
                new_grant_from_arb
            );
        end

        // Final test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_BasicGrantHoldActivation", $time);
          passed_tests.push_back("test_BasicGrantHoldActivation");
        end else begin
          $display("Time: %0t, FAILED: test_BasicGrantHoldActivation", $time);
          failed_tests.push_back("test_BasicGrantHoldActivation");
        end
      end
    join_any
    disable fork;
  endtask
  task automatic test_PriorityUpdateControl;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_PriorityUpdateControl", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_PriorityUpdateControl. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_PriorityUpdateControl");
      end
      begin
        // This task verifies the priority update control functionality by checking the behavior of the enable_priority_update_to_arb signal based on the state of the grant_hold signal.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] random_grant_hold;
        logic [NumRequesters-1:0] random_grant_from_arb;

        // Wait for a clock edge to ensure proper stimulus propagation
        @(posedge clk);

        // Step 1: Assert enable_priority_update to allow priority updates
        enable_priority_update = 1'b1;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_PriorityUpdateControl - Asserted enable_priority_update = 1",
              $time
          );

        // Step 2: Assert grant_hold for one or more requesters along with grant_from_arb matching the value of grant_hold
        random_grant_hold =
            $urandom_range(1, (1 << NumRequesters) - 1);  // Ensure at least one bit is set
        random_grant_from_arb = random_grant_hold;
        grant_hold = random_grant_hold;
        grant_from_arb = random_grant_from_arb;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_PriorityUpdateControl - Asserted grant_hold = 0x%h, grant_from_arb = 0x%h",
              $time,
              grant_hold,
              grant_from_arb
          );

        // Step 3: Monitor enable_priority_update_to_arb output for expected behavior
        @(posedge clk);
        if (enable_priority_update_to_arb !== 1'b0) begin
          $display(
              "Time: %0t, ERROR: test_PriorityUpdateControl - Check failed. Expected enable_priority_update_to_arb = 0, got %b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_PriorityUpdateControl - Check passed. Expected value for enable_priority_update_to_arb is the same as the observed value (both are 0).",
                $time
            );
        end

        // Step 4: Deassert all grant_hold signals
        grant_hold = 'h0;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_PriorityUpdateControl - Deasserted all grant_hold signals",
              $time
          );

        // Step 5: Monitor enable_priority_update_to_arb output for expected behavior
        @(posedge clk);
        if (enable_priority_update_to_arb !== 1'b1) begin
          $display(
              "Time: %0t, ERROR: test_PriorityUpdateControl - Check failed. Expected enable_priority_update_to_arb = 1, got %b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_PriorityUpdateControl - Check passed. Expected value for enable_priority_update_to_arb is the same as the observed value (both are 1).",
                $time
            );
        end

        // Report test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_PriorityUpdateControl", $time);
          passed_tests.push_back("test_PriorityUpdateControl");
        end else begin
          $display("Time: %0t, FAILED: test_PriorityUpdateControl", $time);
          failed_tests.push_back("test_PriorityUpdateControl");
        end
      end
    join_any
    disable fork;
  endtask
  task automatic test_GrantSignalPropagation;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_GrantSignalPropagation", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_GrantSignalPropagation. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_GrantSignalPropagation");
      end
      begin
        // This task tests the grant signal propagation functionality, ensuring that the grant signals from the arbiter are correctly propagated to the output grant signals.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] expected_grant;
        int granted_requester;

        // Initial delay to ensure proper stimulus propagation
        @(posedge clk);

        // Step 1: Drive `grant_from_arb` with a specific requester granted
        granted_requester = $urandom_range(0, NumRequesters - 1);
        grant_from_arb = '0;
        grant_from_arb[granted_requester] = 1'b1;
        grant_hold = '0;
        enable_priority_update = 1'b1;
        expected_grant = grant_from_arb;

        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_GrantSignalPropagation - Driving grant_from_arb=0x%h, grant_hold=0x%h",
              $time,
              grant_from_arb,
              grant_hold
          );

        // Step 2: Monitor `grant` output for correct propagation
        @(posedge clk);
        if (grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_GrantSignalPropagation - Check failed. Expected grant=0x%h, got grant=0x%h",
              $time, expected_grant, grant);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_GrantSignalPropagation - Check passed. Expected value for grant is the same as the observed value (both are 0x%h).",
                $time,
                grant
            );
        end

        // Step 3: Assert `grant_hold` for the granted requester
        grant_hold[granted_requester] = 1'b1;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_GrantSignalPropagation - Asserting grant_hold for requester %0d",
              $time,
              granted_requester
          );

        // Step 4: Change `grant_from_arb` to no requesters granted
        grant_from_arb = '0;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_GrantSignalPropagation - Driving grant_from_arb=0x%h",
              $time,
              grant_from_arb
          );

        // Step 5: Monitor `grant` output to ensure the grant is held
        @(posedge clk);
        if (grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_GrantSignalPropagation - Check failed. Expected grant=0x%h, got grant=0x%h",
              $time, expected_grant, grant);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_GrantSignalPropagation - Check passed. Expected value for grant is the same as the observed value (both are 0x%h).",
                $time,
                grant
            );
        end

        // Final test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_GrantSignalPropagation", $time);
          passed_tests.push_back("test_GrantSignalPropagation");
        end else begin
          $display("Time: %0t, FAILED: test_GrantSignalPropagation", $time);
          failed_tests.push_back("test_GrantSignalPropagation");
        end
      end
    join_any
    disable fork;
  endtask
  task automatic test_EnablePriorityUpdateToArbiter;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_EnablePriorityUpdateToArbiter", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_EnablePriorityUpdateToArbiter. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_EnablePriorityUpdateToArbiter");
      end
      begin
        // This task verifies the enable priority update to arbiter functionality, ensuring that the priority update signal is passed to the arbiter only when no grants are held.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] grant_hold_val;
        logic [NumRequesters-1:0] grant_from_arb_val;

        // Initial delay to ensure proper stimulus propagation
        @(posedge clk);

        // Step 1: Set enable_priority_update to 1
        enable_priority_update = 1;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_EnablePriorityUpdateToArbiter - Driving enable_priority_update=1",
              $time
          );
        @(posedge clk);

        // Step 2: Assert grant_hold for one or more requesters and drive grant_from_arb to the same value
        grant_hold_val = 'h1;  // Example value, can be randomized
        grant_from_arb_val = grant_hold_val;
        grant_hold = grant_hold_val;
        grant_from_arb = grant_from_arb_val;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_EnablePriorityUpdateToArbiter - Driving grant_hold=0x%h, grant_from_arb=0x%h",
              $time,
              grant_hold_val,
              grant_from_arb_val
          );
        @(posedge clk);

        // Step 3: Monitor enable_priority_update_to_arb output
        if (enable_priority_update_to_arb !== 0) begin
          $display(
              "Time: %0t, ERROR: test_EnablePriorityUpdateToArbiter - Check failed. Expected enable_priority_update_to_arb=0, got %0b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_EnablePriorityUpdateToArbiter - Check passed. enable_priority_update_to_arb=0 as expected.",
                $time
            );
        end

        // Step 4: Deassert all grant_hold signals
        grant_hold = 'h0;
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_EnablePriorityUpdateToArbiter - Deasserting grant_hold", $time
          );
        @(posedge clk);

        // Step 5: Monitor enable_priority_update_to_arb output
        if (enable_priority_update_to_arb !== 1) begin
          $display(
              "Time: %0t, ERROR: test_EnablePriorityUpdateToArbiter - Check failed. Expected enable_priority_update_to_arb=1, got %0b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_EnablePriorityUpdateToArbiter - Check passed. enable_priority_update_to_arb=1 as expected.",
                $time
            );
        end

        // Final test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_EnablePriorityUpdateToArbiter", $time);
          passed_tests.push_back("test_EnablePriorityUpdateToArbiter");
        end else begin
          $display("Time: %0t, FAILED: test_EnablePriorityUpdateToArbiter", $time);
          failed_tests.push_back("test_EnablePriorityUpdateToArbiter");
        end
      end
    join_any
    disable fork;
  endtask
  task automatic test_ResetBehaviorVerification;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_ResetBehaviorVerification", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_ResetBehaviorVerification. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_ResetBehaviorVerification");
      end
      begin
        // This task verifies the behavior of the DUT module during and after the reset phase, ensuring that all output signals transition to their expected default values.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] expected_grant;
        logic expected_enable_priority_update_to_arb;

        // Initialize expected values
        expected_grant = '0;
        expected_enable_priority_update_to_arb = 0;

        // Wait for a clock edge to ensure proper stimulus propagation
        @(posedge clk);

        // Step 1: Assume the reset signal is already asserted in the testbench

        // Step 2: Monitor the output signals during the reset phase
        @(posedge clk);
        if (enable_priority_update_to_arb !== expected_enable_priority_update_to_arb) begin
          $display(
              "Time: %0t, ERROR: test_ResetBehaviorVerification - enable_priority_update_to_arb check failed during reset. Expected 0, got %b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else if (ENABLE_INFO_MESSAGES == 1) begin
          $display(
              "Time: %0t, INFO: test_ResetBehaviorVerification - enable_priority_update_to_arb check passed during reset.",
              $time);
        end

        if (grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_ResetBehaviorVerification - grant check failed during reset. Expected 0, got %b",
              $time, grant);
          test_failed = 1;
        end else if (ENABLE_INFO_MESSAGES == 1) begin
          $display(
              "Time: %0t, INFO: test_ResetBehaviorVerification - grant check passed during reset.",
              $time);
        end

        // Step 3: Assume the reset signal is deasserted in the testbench

        // Step 4: Verify that the output signals remain stable at their default values after reset
        @(posedge clk);
        if (enable_priority_update_to_arb !== expected_enable_priority_update_to_arb) begin
          $display(
              "Time: %0t, ERROR: test_ResetBehaviorVerification - enable_priority_update_to_arb check failed after reset. Expected 0, got %b",
              $time, enable_priority_update_to_arb);
          test_failed = 1;
        end else if (ENABLE_INFO_MESSAGES == 1) begin
          $display(
              "Time: %0t, INFO: test_ResetBehaviorVerification - enable_priority_update_to_arb check passed after reset.",
              $time);
        end

        if (grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_ResetBehaviorVerification - grant check failed after reset. Expected 0, got %b",
              $time, grant);
          test_failed = 1;
        end else if (ENABLE_INFO_MESSAGES == 1) begin
          $display(
              "Time: %0t, INFO: test_ResetBehaviorVerification - grant check passed after reset.",
              $time);
        end

        // Final test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_ResetBehaviorVerification", $time);
          passed_tests.push_back("test_ResetBehaviorVerification");
        end else begin
          $display("Time: %0t, FAILED: test_ResetBehaviorVerification", $time);
          failed_tests.push_back("test_ResetBehaviorVerification");
        end
      end
    join_any
    disable fork;
  endtask
  task automatic test_PostResetSignalStability;
    fork
      begin
        #(PER_TASK_TIMEOUT);
        $display("Time: %0t, FAILED: test_PostResetSignalStability", $time);
        $display(
            "Time: %0t, INFO: Timeout: test_PostResetSignalStability. Stimuli is not observed or it needs more time to finish this test.",
            $time);
        failed_tests.push_back("test_PostResetSignalStability");
      end
      begin
        // This task verifies that the output signals of the DUT remain stable and at their expected default values after the reset phase has been completed.

        // Local variables declaration
        int test_failed = 0;
        logic [NumRequesters-1:0] expected_grant;
        logic expected_enable_priority_update_to_arb;

        // Initialize expected values
        expected_grant = 'h0;
        expected_enable_priority_update_to_arb = 1'b0;

        // Wait for a clock edge to ensure proper stimulus propagation
        @(posedge clk);

        // Step 2: Drive inputs to known values (0).
        grant_hold = 'h0;
        enable_priority_update = 1'b0;
        grant_from_arb = 'h0;
        @(posedge clk);
        if (ENABLE_INFO_MESSAGES == 1)
          $display(
              "Time: %0t, INFO: test_PostResetSignalStability - Inputs driven to known values.",
              $time
          );

        // Step 4: Monitor the output signals after the reset is deasserted.
        if (enable_priority_update_to_arb !== expected_enable_priority_update_to_arb) begin
          $display(
              "Time: %0t, ERROR: test_PostResetSignalStability - enable_priority_update_to_arb check failed. Expected %b, got %b",
              $time, expected_enable_priority_update_to_arb, enable_priority_update_to_arb);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_PostResetSignalStability - enable_priority_update_to_arb check passed. Expected and observed value is %b.",
                $time,
                enable_priority_update_to_arb
            );
        end

        if (grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_PostResetSignalStability - grant check failed. Expected %b, got %b",
              $time, expected_grant, grant);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_PostResetSignalStability - grant check passed. Expected and observed value is %b.",
                $time,
                grant
            );
        end

        // Step 5: Ensure that the output signals do not change unexpectedly and remain stable.
        repeat (5) @(posedge clk);
        if (enable_priority_update_to_arb !== expected_enable_priority_update_to_arb || grant !== expected_grant) begin
          $display(
              "Time: %0t, ERROR: test_PostResetSignalStability - Output signals changed unexpectedly.",
              $time);
          test_failed = 1;
        end else begin
          if (ENABLE_INFO_MESSAGES == 1)
            $display(
                "Time: %0t, INFO: test_PostResetSignalStability - Output signals remained stable.",
                $time
            );
        end

        // Report test status
        if (test_failed == 0) begin
          $display("Time: %0t, PASSED: test_PostResetSignalStability", $time);
          passed_tests.push_back("test_PostResetSignalStability");
        end else begin
          $display("Time: %0t, FAILED: test_PostResetSignalStability", $time);
          failed_tests.push_back("test_PostResetSignalStability");
        end
      end
    join_any
    disable fork;
  endtask
endmodule
