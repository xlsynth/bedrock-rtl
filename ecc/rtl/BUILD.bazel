# Copyright 2024-2025 The Bedrock-RTL Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_hdl//verilog:providers.bzl", "verilog_library")
load("//bazel:br_verilog.bzl", "br_verilog_elab_and_lint_test_suite")

package(default_visibility = ["//visibility:public"])

#########################################
# SED Encoder
#########################################
verilog_library(
    name = "br_ecc_sed_encoder",
    srcs = ["br_ecc_sed_encoder.sv"],
    deps = [
        "//delay/rtl:br_delay_valid",
        "//macros:br_asserts_internal",
    ],
)

br_verilog_elab_and_lint_test_suite(
    name = "br_ecc_sed_encoder_test_suite",
    params = {"DataWidth": [
        "1",
        "32",
    ]},
    deps = [":br_ecc_sed_encoder"],
)

#########################################
# SED Decoder
#########################################
verilog_library(
    name = "br_ecc_sed_decoder",
    srcs = ["br_ecc_sed_decoder.sv"],
    deps = [
        "//delay/rtl:br_delay_valid",
        "//macros:br_asserts_internal",
    ],
)

br_verilog_elab_and_lint_test_suite(
    name = "br_ecc_sed_decoder_test_suite",
    params = {"DataWidth": [
        "1",
        "32",
    ]},
    deps = [":br_ecc_sed_decoder"],
)

#########################################
# SECDED Encoder
#########################################
verilog_library(
    name = "br_ecc_secded_encoder",
    srcs = ["br_ecc_secded_encoder.sv"],
    deps = [
        "//delay/rtl:br_delay_valid",
        "//macros:br_asserts",
        "//macros:br_asserts_internal",
        "//macros:br_assign",
        "//macros:br_unused",
        "//pkg:br_ecc_pkg",
        "//pkg:br_math_pkg",
    ],
)

K_R_PAIRS = [
    # Optimized configs
    ("4", "4"),
    ("8", "5"),
    ("11", "5"),
    ("16", "6"),
    ("26", "6"),
    ("32", "7"),
    ("57", "7"),
    ("64", "8"),
    ("120", "8"),
    ("128", "9"),
    ("247", "9"),
    ("256", "10"),
    # Padded configs
    ("9", "5"),
    ("68", "8"),
]

[
    br_verilog_elab_and_lint_test_suite(
        name = "br_ecc_secded_encoder_test_suite_" + k + "_" + r,
        params = {
            "DataWidth": [k],
            "ParityWidth": [r],
            "RegisterOutputs": [
                "0",
                "1",
            ],
        },
        deps = [":br_ecc_secded_encoder"],
    )
    for (k, r) in K_R_PAIRS
]

verilog_library(
    name = "br_ecc_secded_decoder",
    srcs = ["br_ecc_secded_decoder.sv"],
    deps = [
        "//delay/rtl:br_delay_valid",
        "//macros:br_asserts",
        "//macros:br_asserts_internal",
        "//macros:br_assign",
        "//macros:br_unused",
        "//pkg:br_ecc_pkg",
        "//pkg:br_math_pkg",
    ],
)

[
    br_verilog_elab_and_lint_test_suite(
        name = "br_ecc_secded_decoder_test_suite_" + k + "_" + r,
        params = {
            "DataWidth": [k],
            "ParityWidth": [r],
            "RegisterOutputs": [
                "0",
                "1",
            ],
        },
        deps = [":br_ecc_secded_encoder"],
    )
    for (k, r) in K_R_PAIRS
]

# Diff test and codegen
diff_test(
    name = "br_ecc_secded_encoder_diff_test",
    failure_message = """
        Golden br_ecc_secded_encoder.sv does not match the generated code.
        Please run `bazel run //ecc/rtl:update_secded` to automatically update the golden.
    """,
    file1 = "br_ecc_secded_encoder.sv",
    file2 = ":gen_br_ecc_secded_encoder.sv",
)

diff_test(
    name = "br_ecc_secded_decoder_diff_test",
    failure_message = """
        Golden br_ecc_secded_decoder.sv does not match the generated code.
        Please run `bazel run //ecc/rtl:update_secded` to automatically update the golden.
    """,
    file1 = "br_ecc_secded_decoder.sv",
    file2 = ":gen_br_ecc_secded_decoder.sv",
)

genrule(
    name = "gen_secded",
    srcs = [
        "//python/eccgen:br_ecc_secded_encoder.sv.jinja2",
        "//python/eccgen:br_ecc_secded_decoder.sv.jinja2",
    ],
    outs = [
        "gen_br_ecc_secded_encoder.sv",
        "gen_br_ecc_secded_decoder.sv",
    ],
    cmd = "$(location //python/eccgen:eccgen) \
        --scheme=hsiao_secded \
        --rtl-encoder-template=$(location //python/eccgen:br_ecc_secded_encoder.sv.jinja2) \
        --rtl-encoder-output=$(location gen_br_ecc_secded_encoder.sv) \
        --rtl-decoder-template=$(location //python/eccgen:br_ecc_secded_decoder.sv.jinja2) \
        --rtl-decoder-output=$(location gen_br_ecc_secded_decoder.sv)",
    tools = ["//python/eccgen"],
)

write_file(
    name = "gen_update_secded",
    out = "update_secded.sh",
    content = [
        "#!/usr/bin/env bash",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv bazel-bin/ecc/rtl/gen_br_ecc_secded_encoder.sv ecc/rtl/br_ecc_secded_encoder.sv",
        "cp -fv bazel-bin/ecc/rtl/gen_br_ecc_secded_decoder.sv ecc/rtl/br_ecc_secded_decoder.sv",
    ],
)

sh_binary(
    name = "update_secded",
    srcs = [":update_secded.sh"],
    data = [
        "br_ecc_secded_decoder.sv",
        "br_ecc_secded_encoder.sv",
        ":gen_br_ecc_secded_decoder.sv",
        ":gen_br_ecc_secded_encoder.sv",
    ],
)
