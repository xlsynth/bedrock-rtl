# Copyright 2025 The Bedrock-RTL Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_hdl//verilog:providers.bzl", "verilog_library")
load("//bazel:br_verilog.bzl", "br_verilog_fpv_test_tools_suite")
load("//bazel:verilog.bzl", "verilog_elab_test")

package(default_visibility = ["//visibility:public"])

# basic br_ram_flops FV checker
verilog_library(
    name = "br_ram_flops_basic_fv_checker",
    srcs = ["br_ram_flops_basic_fv_checker.sv"],
    deps = [
        "//fpv/lib:fv_delay",
        "//pkg:br_math_pkg",
    ],
)

# Bedrock-RTL Address Decoder

verilog_library(
    name = "br_ram_addr_decoder_fpv_monitor",
    srcs = ["br_ram_addr_decoder_fpv_monitor.sv"],
    deps = [
        "//ram/rtl:br_ram_addr_decoder",
    ],
)

verilog_elab_test(
    name = "br_ram_addr_decoder_fpv_monitor_elab_test",
    custom_tcl_header = "//:elab_test_jg_custom_header.verific.tcl",
    tool = "verific",
    deps = [":br_ram_addr_decoder_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_ram_addr_decoder_test_suite",
    illegal_param_combinations = {
        (
            "Depth",
            "Tiles",
        ): [
            ("1", "2"),
            ("1", "3"),
            ("2", "3"),
        ],
    },
    params = {
        "DataWidth": [
            "1",
            "3",
        ],
        "Depth": [
            "1",
            "2",
            "6",
        ],
        "EnableDatapath": [
            "0",
            "1",
        ],
        "Stages": [
            "0",
            "1",
        ],
        "Tiles": [
            "1",
            "2",
            "3",
        ],
    },
    tags = ["manual"],
    tools = {
        "jg": "",
        "vcf": "",
    },
    top = "br_ram_addr_decoder",
    deps = [":br_ram_addr_decoder_fpv_monitor"],
)

# Bedrock-RTL RAM Read Data Pipeline

verilog_library(
    name = "br_ram_data_rd_pipe_fpv_monitor",
    srcs = ["br_ram_data_rd_pipe_fpv_monitor.sv"],
    deps = [
        "//ram/rtl:br_ram_data_rd_pipe",
    ],
)

verilog_elab_test(
    name = "br_ram_data_rd_pipe_fpv_monitor_elab_test",
    custom_tcl_header = "//:elab_test_jg_custom_header.verific.tcl",
    tool = "verific",
    deps = [":br_ram_data_rd_pipe_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_ram_data_rd_pipe_test_suite",
    illegal_param_combinations = {
        (
            "Width",
            "WidthTiles",
        ): [
            ("1", "2"),
            ("1", "3"),
            ("4", "3"),
        ],
    },
    params = {
        "DepthStages": [
            "0",
            "1",
        ],
        "DepthTiles": [
            "1",
            "2",
            "6",
        ],
        "Width": [
            "1",
            "4",
            "6",
        ],
        "WidthStages": [
            "0",
            "1",
        ],
        "WidthTiles": [
            "1",
            "2",
            "3",
        ],
    },
    tags = ["manual"],
    tools = {
        "jg": "",
        "vcf": "",
    },
    top = "br_ram_data_rd_pipe",
    deps = [":br_ram_data_rd_pipe_fpv_monitor"],
)

# Bedrock-RTL Flop-RAM Tile (same wr/rd clock)

verilog_library(
    name = "br_ram_flops_tile_fpv_monitor",
    srcs = ["br_ram_flops_tile_fpv_monitor.sv"],
    deps = [
        ":br_ram_flops_basic_fv_checker",
        "//gate/rtl:br_gate_mock",
        "//mux/rtl:br_mux_bin_structured_gates",
        "//ram/rtl:br_ram_flops_tile",
    ],
)

verilog_elab_test(
    name = "br_ram_flops_tile_fpv_monitor_elab_test",
    custom_tcl_header = "//:elab_test_jg_custom_header.verific.tcl",
    tool = "verific",
    deps = [":br_ram_flops_tile_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_ram_flops_tile_test_suite",
    illegal_param_combinations = {
        (
            "Width",
            "WordWidth",
        ): [
            ("1", "2"),
            ("1", "3"),
        ],
        (
            "EnableBypass",
            "UseStructuredGates",
        ): [
            ("1", "1"),
        ],
    },
    params = {
        "Depth": [
            "1",
            "4",
            "6",
        ],
        "EnableBypass": [
            "0",
            "1",
        ],
        "EnablePartialWrite": [
            "0",
            "1",
        ],
        "EnableReset": [
            "0",
            "1",
        ],
        "NumReadPorts": [
            "1",
            "2",
            "3",
        ],
        "NumWritePorts": [
            "1",
            "4",
            "6",
        ],
        "UseStructuredGates": [
            "0",
            "1",
        ],
        "Width": [
            "1",
            "6",
            "12",
        ],
        "WordWidth": [
            "1",
            "2",
            "3",
        ],
    },
    tags = ["manual"],
    tools = {
        "jg": "br_ram_flops_tile_1clk_fpv.jg.tcl",
        "vcf": "br_ram_flops_tile_1clk_fpv.vcf.tcl",
    },
    top = "br_ram_flops_tile",
    deps = [":br_ram_flops_tile_fpv_monitor"],
)

# Bedrock-RTL Flop-RAM Tile (different wr/rd clocks)
br_verilog_fpv_test_tools_suite(
    name = "br_ram_flops_tile_2clk_test_suite",
    elab_opts = [
        "-parameter EnableBypass 0",
        "-parameter UseStructuredGates 1",
    ],
    illegal_param_combinations = {
        (
            "Width",
            "WordWidth",
        ): [
            ("1", "2"),
            ("1", "3"),
        ],
    },
    params = {
        "Depth": [
            "1",
            "4",
            "6",
        ],
        "EnablePartialWrite": [
            "0",
            "1",
        ],
        "EnableReset": [
            "0",
            "1",
        ],
        "NumReadPorts": [
            "1",
            "2",
            "3",
        ],
        "NumWritePorts": [
            "1",
            "4",
            "6",
        ],
        "Width": [
            "1",
            "6",
            "12",
        ],
        "WordWidth": [
            "1",
            "2",
            "3",
        ],
    },
    tags = ["manual"],
    tools = {
        "jg": "br_ram_flops_tile_2clk_fpv.jg.tcl",
        "vcf": "",
    },
    top = "br_ram_flops_tile",
    deps = [":br_ram_flops_tile_fpv_monitor"],
)

# Bedrock-RTL Flop-RAM (multi-read/multi-write) (same wr/rd clock)

verilog_library(
    name = "br_ram_flops_fpv_monitor",
    srcs = ["br_ram_flops_fpv_monitor.sv"],
    deps = [
        ":br_ram_flops_basic_fv_checker",
        "//gate/rtl:br_gate_mock",
        "//mux/rtl:br_mux_bin_structured_gates",
        "//ram/rtl:br_ram_flops",
    ],
)

verilog_elab_test(
    name = "br_ram_flops_fpv_monitor_elab_test",
    custom_tcl_header = "//:elab_test_jg_custom_header.verific.tcl",
    tool = "verific",
    deps = [":br_ram_flops_fpv_monitor"],
)

br_verilog_fpv_test_tools_suite(
    name = "br_ram_flops_test_suite",
    gui = True,
    illegal_param_combinations = {
        # DepthTiles must be at least 1 and evenly divide Depth
        (
            "Depth",
            "DepthTiles",
        ): [
            ("1", "2"),
            ("1", "3"),
            ("4", "3"),
        ],
        # WidthTiles must be at least 1 and evenly divide Width
        (
            "Width",
            "WidthTiles",
        ): [
            ("1", "2"),
            ("1", "3"),
        ],
        # Width must be evenly divisible by WordWidth
        (
            "Width",
            "WordWidth",
        ): [
            ("1", "2"),
            ("1", "3"),
        ],
        # WordWidth must be evenly divisible by WidthTiles
        (
            "WordWidth",
            "WidthTiles",
        ): [
            ("1", "2"),
            ("1", "3"),
            ("2", "3"),
            ("3", "2"),
        ],
        # WordWidth must be at least 1 and at most (Width / WidthTiles)
        # (Width / WidthTiles) % WordWidth == 0
        (
            "Width",
            "WidthTiles",
            "WordWidth",
        ): [
            ("6", "2", "2"),
            ("6", "3", "3"),
            ("12", "3", "3"),
        ],
        (
            "TileEnableBypass",
            "UseStructuredGates",
        ): [
            ("1", "1"),
        ],
    },
    params = {
        "Depth": [
            "1",
            "4",
            "6",
        ],
        "DepthTiles": [
            "1",
            "2",
            "3",
        ],
        "TileEnableBypass": [
            "0",
            "1",
        ],
        "EnablePartialWrite": [
            "0",
            "1",
        ],
        #"EnableMemReset": [
        #    "0",
        #    "1",
        #],
        "NumReadPorts": [
            "1",
            "2",
            "3",
        ],
        "NumWritePorts": [
            "1",
            "4",
            "6",
        ],
        "UseStructuredGates": [
            "0",
            "1",
        ],
        "Width": [
            "1",
            "6",
            "12",
        ],
        "WidthTiles": [
            "1",
            "2",
            "3",
        ],
        "WordWidth": [
            "1",
            "2",
            "3",
        ],
        "AddressDepthStages": [
            "0",
            "1",
        ],
        "ReadDataDepthStages": [
            "0",
            "1",
        ],
        "ReadDataWidthStages": [
            "0",
            "1",
        ],
    },
    # TODO
    tags = ["no-sandbox"],
    tools = {
        "jg": "br_ram_flops_tile_1clk_fpv.jg.tcl",
    },
    top = "br_ram_flops",
    deps = [":br_ram_flops_fpv_monitor"],
)
