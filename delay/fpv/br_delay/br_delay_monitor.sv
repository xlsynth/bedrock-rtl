
/*
*********************************************
**    File auto-generated by Chipstack.    **
*********************************************
*/

module br_delay_monitor
    #(
        parameter int BitWidth = 1,
        parameter int NumStages = 0
    )
    (
        input logic clk,
        input logic rst,
        input logic[BitWidth-1:0] in,
        input logic[BitWidth-1:0] out
    );

Reset_Value_of__out_ #(.BitWidth(BitWidth), .NumStages(NumStages)) Reset_Value_of__out__inst(.*);
Passthrough_Operation #(.BitWidth(BitWidth), .NumStages(NumStages)) Passthrough_Operation_inst(.*);
Delayed_Operation #(.BitWidth(BitWidth), .NumStages(NumStages)) Delayed_Operation_inst(.*);
endmodule

module Reset_Value_of__out_
    #(
        parameter int BitWidth = 1,
        parameter int NumStages = 0
    )
    (
        input logic clk,
        input logic rst,
        input logic[BitWidth-1:0] out
    );

// Reset Value of 'out': Check that if: NumStages > 0 and 'rst' is set to '1' and then falls back to '0', then: 'out' is '0' immediately.
if (NumStages > 0) begin
    Reset_out_A: assert property (@(posedge clk) $fell(rst) |-> (out == {BitWidth{1'b0}}));
end
endmodule

module Passthrough_Operation
    #(
        parameter int BitWidth = 1,
        parameter int NumStages = 0
    )
    (
        input logic clk,
        input logic rst,
        input logic[BitWidth-1:0] in,
        input logic[BitWidth-1:0] out
    );

// Passthrough Operation: Check that if: NumStages = 0 then: out = in immediately.
if (NumStages == 0) begin
    Passthrough_Operation_A: assert property (@(posedge clk) disable iff (rst) out == in);
end
endmodule

module Delayed_Operation
    #(
        parameter int BitWidth = 1,
        parameter int NumStages = 0
    )
    (
        input logic clk,
        input logic rst,
        input logic[BitWidth-1:0] in,
        input logic[BitWidth-1:0] out
    );

// Delayed Operation: Check that if: NumStages > 0 and an initial one-time delay of NumStages cycles, then: out equals the past value of in from NumStages cycles ago.
if (NumStages > 0) begin
    Delayed_Output_Check_A: assert property (@(posedge clk) disable iff (rst) ##NumStages out == $past(in, NumStages));
end
endmodule
bind br_delay br_delay_monitor
    #(
        .BitWidth(BitWidth),
        .NumStages(NumStages)
    )  monitor (
        .clk(clk),
        .rst(rst),
        .in(in),
        .out(out)
    );
