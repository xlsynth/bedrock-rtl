
/*
*********************************************
**    File auto-generated by Chipstack.    **
*********************************************
*/

module br_delay_nr_monitor #(
    parameter int Width  = 1,
    parameter int NumStages = 0
) (
    input logic clk,
    input logic rst,
    input logic [Width-1:0] in,
    input logic [Width-1:0] out
);

  Immediate_Reflection_for_Zero_Stages #(
      .Width (Width),
      .NumStages(NumStages)
  ) Immediate_Reflection_for_Zero_Stages_inst (
      .*
  );
  Delayed_Reflection_for_Non_Zero_Stages #(
      .Width (Width),
      .NumStages(NumStages)
  ) Delayed_Reflection_for_Non_Zero_Stages_inst (
      .*
  );
endmodule

module Immediate_Reflection_for_Zero_Stages #(
    parameter int Width  = 1,
    parameter int NumStages = 0
) (
    input logic clk,
    input logic rst,
    input logic [Width-1:0] in,
    input logic [Width-1:0] out
);

  // Immediate Reflection for Zero Stages: Check that if: NumStages is 0 and clk rises, then: out equals in immediately.
  if (NumStages == 0) begin
    Immediate_Reflection_A :
    assert property (@(posedge clk) disable iff (rst) (out == in));
  end
endmodule

module Delayed_Reflection_for_Non_Zero_Stages #(
    parameter int Width  = 1,
    parameter int NumStages = 0
) (
    input logic clk,
    input logic rst,
    input logic [Width-1:0] in,
    input logic [Width-1:0] out
);

  // Delayed Reflection for Non-Zero Stages: Check that if: NumStages is greater than 0, after an initial one-time delay of NumStages cycles, and clk rises, then: out equals in from NumStages cycles ago.
  if (NumStages > 0) begin
    Delayed_Reflection_A :
    assert property (@(posedge clk) disable iff (rst) ##NumStages out == $past(in, NumStages));
  end
endmodule
bind br_delay_nr br_delay_nr_monitor #(
    .Width (Width),
    .NumStages(NumStages)
) monitor (
    .clk(clk),
    .rst(rst),
    .in (in),
    .out(out)
);
